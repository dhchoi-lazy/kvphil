generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "darwin", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id                       String       @id @default(cuid())
  name                     String?      @db.VarChar(100)
  email                    String       @unique @db.VarChar(100)
  image                    String?      @db.VarChar(255)
  password                 String       @db.VarChar(255)
  role                     UserRole     @default(USER)
  last_login               DateTime?    @db.Timestamptz(0)
  session_duration_seconds Int?
  chats                    Chat[]
  documents                Document[]
  suggestions              Suggestion[]

  @@index([role])
  @@map("user")
}

model Philosopher {
  id      String    @id @default(cuid())
  name    String    @db.VarChar(100)
  image   String?   @db.VarChar(255)
  chats   Chat[]
  sources Sources[]

  @@map("philosopher")
}

model Chat {
  id            String      @id @default(uuid())
  createdAt     DateTime?   @default(now())
  title         String
  userId        String
  philosopherId String
  philosopher   Philosopher @relation(fields: [philosopherId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
  messages      Message[]
  votes         Vote[]

  @@map("chat")
}

model Message {
  id         String   @id @default(uuid())
  chatId     String
  role       String
  content    Json
  createdAt  DateTime @default(now())
  references Json?
  chat       Chat     @relation(fields: [chatId], references: [id])
  votes      Vote[]

  @@map("message")
}

model Vote {
  chatId    String
  messageId String
  isUpvoted Boolean
  chat      Chat    @relation(fields: [chatId], references: [id])
  message   Message @relation(fields: [messageId], references: [id])

  @@id([chatId, messageId])
  @@map("vote")
}

model Document {
  id          String
  createdAt   DateTime
  title       String
  content     String?
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  suggestions Suggestion[]

  @@id([id, createdAt])
  @@map("document")
}

model Suggestion {
  id                String   @id @default(uuid())
  documentId        String
  documentCreatedAt DateTime
  originalText      String
  suggestedText     String
  description       String?
  isResolved        Boolean  @default(false)
  userId            String
  createdAt         DateTime @default(now())
  document          Document @relation(fields: [documentId, documentCreatedAt], references: [id, createdAt])
  user              User     @relation(fields: [userId], references: [id])

  @@map("suggestion")
}

model Sources {
  id             Int                    @id @default(autoincrement())
  url            String?
  philosopher_id String
  paragraph_id   String
  paragraph      String
  section_name   String
  embedding      Unsupported("vector")?
  philosopher    Philosopher            @relation(fields: [philosopher_id], references: [id])

  @@map("sources")
}

enum UserRole {
  ADMIN
  USER
}
